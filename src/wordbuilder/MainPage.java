/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wordbuilder;

import database.DatabaseOperations;
import edu.smu.tspell.wordnet.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.text.BadLocationException;

/**
 *
 * @author chandra
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    WindowAdapter windowadapter;
    public MainPage() {
        initComponents();
        
      //  this.setUndecorated(true);
        
     windowadapter = new WindowAdapter()
        {
            public void windowClosing(WindowEvent we)
            {
                setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                //System.out.println("hello world");
                //System.exit(0);
            }
        };
     
     
     addWindowListener(windowadapter);
     jLabel3.setText("Hi " + WordBuilder.getCurrentUser());
            }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton3 = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();

        jToggleButton3.setText("jToggleButton3");

        setTitle("WordBuilder");

        jLabel1.setText("Query");

        jTextField1.setText("jTextField1");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Relatives");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Option");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Quiz");

        jButton4.setText("Analysis");

        jLabel3.setText("Hello User");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jTabbedPane1.addTab("Synonyms", jScrollPane3);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane4.setViewportView(jTextArea3);

        jTabbedPane1.addTab("Antonyms", jScrollPane4);

        jButton6.setText("Hide");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(32, 32, 32)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jLabel3)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String toSearch = jTextField1.getText();
        setEdit();
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
        


        if (!(toSearch.equals("") | toSearch.equals(" "))) {
            try {
                renderText(toSearch);
            } catch (SQLException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        jButton1.doClick();
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                if(op==null)
        {
             op = new Options();
        }
        op.setVisible(true);
            }
        });
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     *
     * @param inputword Word whose Meanings are rendered on GUI
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private void renderText(String inputword) throws SQLException, ClassNotFoundException {
        try {
            WordNetDatabase database = WordNetDatabase.getFileInstance();
            Synset[] synset = database.getSynsets(inputword,null,false);
            Synset[] synsetNoun = database.getSynsets(inputword, SynsetType.NOUN,false);
            Synset[] synsetAdj = database.getSynsets(inputword, SynsetType.ADJECTIVE,false);
            Synset[] synsetAdjsat = database.getSynsets(inputword, SynsetType.ADJECTIVE_SATELLITE,false);
            Synset[] synsetAdv = database.getSynsets(inputword, SynsetType.ADVERB,false);
            Synset[] synsetVerb = database.getSynsets(inputword, SynsetType.VERB,false);
            boolean isValidword = false;
            int y = 0;
            ArrayList<String> testcompare = new ArrayList();
            ArrayList<String> anticompare = new ArrayList();

            if (synsetNoun.length > 0) {
                isValidword = true;
                jTextArea1.append("  " + inputword + " ~ NOUN \n \n");
                for (int i = 0; i < synsetNoun.length; i++) {
                    y = i + 1;
                    jTextArea1.append(" " + y + ". " + synsetNoun[i].getDefinition() + "\n \n");
                    String[] wordForms = synsetNoun[i].getWordForms();

                    for (int j = 0; j < wordForms.length; j++) {

                        if (!wordForms[j].equals(inputword)) {
                            if (!testcompare.contains(wordForms[j])) {
                                jTextArea2.append(wordForms[j] + "\n \n");
                                testcompare.add(wordForms[j]);
                            }
                        }
                    }


                    WordSense[] antiwordForms = synsetNoun[i].getAntonyms(inputword);
                    for (int k = 0; k < antiwordForms.length; k++) {
                        
                        if (!anticompare.contains(antiwordForms[k].getWordForm())) {
                            jTextArea3.append(antiwordForms[k].getWordForm() + " \n \n");
                            anticompare.add(antiwordForms[k].getWordForm());

                        }



                    }
                }
            }
            if (synsetAdj.length > 0) {
                isValidword = true;
                jTextArea1.append("  " + inputword + " ~ ADJECTIVE \n \n");
                for (int i = 0; i < synsetAdj.length; i++) {
                    y = i + 1;

                    jTextArea1.append(" " + y + ". " + synsetAdj[i].getDefinition() + "\n \n");
                    String[] wordForms = synsetAdj[i].getWordForms();
                    for (int j = 0; j < wordForms.length; j++) {
                        if (!wordForms[j].equals(inputword)) {
                            if (!testcompare.contains(wordForms[j])) {
                                jTextArea2.append(wordForms[j] + "\n \n");
                                testcompare.add(wordForms[j]);
                            }
                        }

                    }

                    WordSense[] antiwordForms = synsetAdj[i].getAntonyms(inputword);
                    for (int k = 0; k < antiwordForms.length; k++) {
                        if (!anticompare.contains(antiwordForms[k].getWordForm())) {
                            jTextArea3.append(antiwordForms[k].getWordForm() + " \n \n");
                            anticompare.add(antiwordForms[k].getWordForm());

                        }
                    }


                }

                if (synsetAdjsat.length > 0) {
                    for (int i = 0; i < synsetAdjsat.length; i++) {
                        y++;
                        jTextArea1.append(" " + y + ". " + synsetAdjsat[i].getDefinition() + "\n \n");
                        String[] wordForms = synsetAdjsat[i].getWordForms();
                        for (int j = 0; j < wordForms.length; j++) {
                            if (!wordForms[j].equals(inputword)) {
                                if (!testcompare.contains(wordForms[j])) {
                                    jTextArea2.append(wordForms[j] + "\n \n");
                                    testcompare.add(wordForms[j]);
                                }
                            }
                        }

                        WordSense[] antiwordForms = synsetAdjsat[i].getAntonyms(inputword);
                        for (int k = 0; k < antiwordForms.length; k++) {
                            if (!anticompare.contains(antiwordForms[k].getWordForm())) {
                                jTextArea3.append(antiwordForms[k].getWordForm() + " \n \n");
                                anticompare.add(antiwordForms[k].getWordForm());

                            }
                        }



                    }
                }
            }
            if (synsetVerb.length > 0) {
                isValidword = true;
                jTextArea1.append("  " + inputword + " ~ VERB \n \n");
                for (int i = 0; i < synsetVerb.length; i++) {
                    y = i + 1;
                    jTextArea1.append(" " + y + ". " + synsetVerb[i].getDefinition() + "\n \n");
                    String[] wordForms = synsetVerb[i].getWordForms();
                    for (int j = 0; j < wordForms.length; j++) {
                        if (!wordForms[j].equals(inputword)) {
                            if (!testcompare.contains(wordForms[j])) {
                                jTextArea2.append(wordForms[j] + "\n \n");
                                testcompare.add(wordForms[j]);
                            }
                        }

                    }

                    WordSense[] antiwordForms = synsetVerb[i].getAntonyms(inputword);
                    for (int k = 0; k < antiwordForms.length; k++) {
                        if (!anticompare.contains(antiwordForms[k].getWordForm())) {
                            jTextArea3.append(antiwordForms[k].getWordForm() + " \n \n");
                            anticompare.add(antiwordForms[k].getWordForm());

                        }
                    }


                }

            }
            if (synsetAdv.length > 0) {
                isValidword = true;
                jTextArea1.append("  " + inputword + " ~ ADVERB \n \n");
                for (int i = 0; i < synsetAdv.length; i++) {
                    y = i + 1;
                    jTextArea1.append(" " + y + ". " + synsetAdv[i].getDefinition() + "\n \n");
                    String[] wordForms = synsetAdv[i].getWordForms();
                    for (int j = 0; j < wordForms.length; j++) {
                        if (!wordForms[j].equals(inputword)) {
                            if (!testcompare.contains(wordForms[j])) {
                                jTextArea2.append(wordForms[j] + "\n \n");
                                testcompare.add(wordForms[j]);
                            }
                        }

                    }

                    WordSense[] antiwordForms = synsetAdv[i].getAntonyms(inputword);
                    for (int k = 0; k < antiwordForms.length; k++) {
                        if (!anticompare.contains(antiwordForms[k].getWordForm())) {
                            jTextArea3.append(antiwordForms[k].getWordForm() + " \n \n");
                            anticompare.add(antiwordForms[k].getWordForm());

                        }
                    }


                }
            }

            if (isValidword) {

                if (WordBuilder.getCurrentUser() != null) {
                    ArrayList<String> alsenddata = new ArrayList();
                    alsenddata.add(WordBuilder.getCurrentUser());
                    alsenddata.add(inputword);
                    alsenddata.add(String.valueOf(synset[ApiFetch.getMaxFrequency(inputword)].getTagCount(inputword)));
                    DatabaseOperations.updateHasSearched(alsenddata);
                }
            } else {
                jTextArea1.setText(" Sorry, queried input does not match the database");
            }

          unsetEdit();
          jTextArea1.setCaretPosition(0);
          jTextArea2.setCaretPosition(0);
          
        } catch (Exception ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /**
     * Make all TextArea Editable
     */
    public void setEdit()
    {
        jTextArea1.setEditable(true);
        jTextArea1.setEditable(true);
        jTextArea1.setEditable(true);
    }
    
    /**
     * Make all Textarea uneditable
     */
    public void unsetEdit()
    {
        jTextArea1.setEditable(false);
        jTextArea2.setEditable(false);
        jTextArea3.setEditable(false);
        
    }
   
    /*public void windowClosing(WindowEvent e)
    {
        System.out.println(" Hello world");
        BackGround.exitBG();
    }
    */

 
    private Options op;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton3;
    // End of variables declaration//GEN-END:variables
}
